version: '3.7'
services:
  gateway:
    image: stephlsechrist/gateway-img
    ports:
      - "3004:3004"
    deploy:
      replicas: 1
    networks:
      - webnet
  frontend:
    image: stephlsechrist/frontend-img
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
  socket:
    image: stephlsechrist/socket-img
    depends_on:
      - redis
    ports:
      - "4200:4200"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - webnet
  inventory:
    image: stephlsechrist/inventory-img
    ports:
      - "4001:4001"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
      - mongo
    networks:
      - webnet
  receipt:
    image: stephlsechrist/receipt-img
    ports:
      - "4004:4004"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - kafka
    networks:
      - webnet
  transaction:
    image: stephlsechrist/transaction-img
    ports: 
      - "4002:4002"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - kafka
      - redis
      - mongo
    networks:
      - webnet
  stats:
    image: stephlsechrist/stats
    ports: 
      - "3001:3001"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
    networks:
      - webnet
  auth:
    image: stephlsechrist/auth-image
    ports:
      - "4000:4000"
    deploy:
      replicas: 1
      restart_policy: 
        condition: on-failure
    depends_on:
      - redis
      - mongo
    networks:
      - webnet
  mongo:
    image: mongo:latest
    ports: 
      - "27017:27017"
    restart: always
    networks: 
     - webnet
  redis:
    image : redis:5.0.4
    ports:
      - "6379:6379"
    deploy:
      placement:
        constraints: [node.role == manager]
    command: redis-server --appendonly yes
    networks:
      - webnet
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - webnet
  kafka:
    image : wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    networks:
      - webnet
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
      - webnet
networks:
  webnet: